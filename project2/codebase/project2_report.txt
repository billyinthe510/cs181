1. Basic information
Team Number : 26
Student ID# of Submitter: 
Name of Submitter: 
ID#s and Names for others on the Team
1481216 FRANCIS CRUZ
1499240 BILLY LAI
1565037 CHARISSA MAMUYAC


2. Meta-data
- Show your meta-data design (Tables and Columns table) and information about each column.

System catalog tables: "Tables" table
					  table-id(int) is 1,
					  table-name(VarChar) is "Tables", and
					  RBF file-name(VarChar) associated with it is "Tables"
System catalog columns: "Columns"
						table-id(int) is 2,
						table-name(VarChar) is "Columns", and
						RBF file-name(VarChar) associated with it is "Columns"

We didn't alter the given attributes and their names. So, we have "Tables" table with table-id:int, table-name:varchar(50), file-name:varchar(50)) as its attributes 
and "Columns" table with able-id:int, column-name:varchar(50), column-type:int, column-length:int, column-position:int as its attributes. We chose not to implement a flag to indicate if a table is a system or a user table, but decided to just check the table's name to restrict modifications of the system tables (if tableName is "Tables" or "Columns" return an error).


3. Internal Record Format
- Show your record format design and describe how your design satisfies O(1) field access. If not, just mention that your team hasn't implemented this feature.
- Describe how you store a VarChar field.
- Describe how you deal with an update and delete.

Our record format satisfies O(1) field access. We used the given solution for asg 1, which looks at the nullbits and uses a slot directory to get a record's length and offset.

We store VarChar fields by storing the length of the VarChar (int) before the actual string(VarChar) value. So whenever we have to access a VarChar field,
we have to get the size of the VarChar field by reading the integer that precedes the string value itself.

For update, we first get the size of the record. We then read the page, check the slot and make sure it's valid. We check if a slot directory entry is either alive(valid offset and length), dead(offset and length set to 0), or moved(offset is negative). If it's "alive", we check if the record is the same size and use the same page, offset, and length. If the record has shrunk, we use the same page, update the length and offset, then call our helper function compact() to reclaim/add the new free space we obtain from the update. If the record is larger but there is still space on the page after deleting the original record, we use the same page and update the offset and length. If there isn't enough space in the page for the record, we call compact(), check again if there is enough space on the page. If there really isn't, we insert the record on another page that has enough free space, update the slot entry to have the new (forwarding) address. If the entry is "dead", we return an error. If it has "moved", we use the slot entry, which should have the record's new "location", and call updateRecord() recursively. 

For delete, we check if the record's slot entry is alive, dead, or moved. If it's alive, we set the record entry's offset and length to 0, indicating that the record has been deleted, or is dead. If it's dead, we return an error. If it has been moved, we use RID r2 which has pageNum as the recordEntry's length and rid2.slotNum as a negative recordEntry offset, and call deleteRecord() recursively.



4. Page Format
- Show your page format design.
- Describe how you deal with an update and delete.

We used the provided solution for asg 1. We have a slot directory at the beginning of each page. The slot directory entry has the record's offset and length. Whenever the insertRecord() function is called, the slot directory is updated with the new entry's offset and length. We keep track of the free space in a page by the having a slot header which contains the free space offset and the number of record entries in a page.

For updates, if a record has moved, we keep the record's slot entry on the same page with its slot entry's offset set to the forwarding address. 

For deletes, if a slot entry is "dead", we reuse it if a record fits in that page. We only add a new entry to the slot directory if all the entries in the directory is used, and there is enough free space for a record in that page. 

5. File Format
- Show your file format design

The name of the "table-name" in our catalog matches the RBF "file-name" associated with it.



6. Implementation Detail
- Other implementation details goes here.


7. Other (optional)
- Freely use this section to tell us about things that are related to the project 2, but not related to the other sections (optional)
